name: Test Matrix (Multi-platform)

on:
  pull_request:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12', '3.13']
        exclude:
          # Optionally exclude some combinations if needed
          - os: windows-latest
            python-version: '3.11'  # Example: skip older Python on Windows

    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        channel-priority: strict

    - name: Install dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash -l {0}
      run: |
        conda install -y meson ninja numpy pytest openblas pkg-config

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      shell: bash -l {0}
      run: |
        conda install -y meson ninja numpy pytest openblas clang llvm-tools lld pkg-config

    - name: Build SLICUTLET (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash -l {0}
      run: |
        # Ensure pkg-config can find conda packages
        export PKG_CONFIG_PATH="$CONDA_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
        meson setup build -Dpython=true
        meson install -C build --destdir="${PWD}/build-install"

    - name: Build SLICUTLET (Windows with clang+MinGW)
      if: runner.os == 'Windows'
      shell: bash -l {0}
      run: |
        # Force clang to target MinGW-w64 instead of MSVC for C11 complex support
        export CC="clang --target=x86_64-w64-mingw32"
        export CXX="clang++ --target=x86_64-w64-mingw32"
        # Windows conda uses Library/lib/pkgconfig not lib/pkgconfig
        export PKG_CONFIG_PATH="$CONDA_PREFIX/Library/lib/pkgconfig:$PKG_CONFIG_PATH"
        meson setup build -Dpython=true
        meson install -C build --destdir="${PWD}/build-install"

    - name: Run tests
      shell: bash -l {0}
      run: |
        PYTHON_VERSION="${{ matrix.python-version }}"
        PYTHON_VERSION_COMPACT="${PYTHON_VERSION//./}"  # Remove dots: 3.13 -> 313
        export PYTHONPATH="${PWD}/build-install/usr/local/lib/python${PYTHON_VERSION}/site-packages"
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          export LD_LIBRARY_PATH="${PWD}/build-install/usr/local/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          export DYLD_LIBRARY_PATH="${PWD}/build-install/usr/local/lib:${DYLD_LIBRARY_PATH}"
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          export PATH="${PWD}/build-install/usr/local/bin:${PATH}"
        fi
        pytest python/tests/ -v
